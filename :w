import { Inject, Injectable } from '@nestjs/common';
import { CreateInvoiceArgs } from './dto/create.invoice.args';
import { InvoiceModel } from './models/invoice.model';
import { plainToInstance } from 'class-transformer';
import { InvoiceEntity } from 'src/database/postgres/entities';
import { DataSource } from 'typeorm';

@Injectable()
export class InvoiceService {
  private invoiceRepository = this.dataSource.getRepository(InvoiceEntity);
  constructor(@Inject('DATA_SOURCE') private readonly dataSource: DataSource) {}
  public async findById({ id }: { id: string }) {
    const invoice: InvoiceModel = {
      id: id,
      name: 'Invoice',
      status: 'Draft',
      quoteNumber: '1',
      lineItems: [],
      deletedAt: null,
      issuedAt: new Date(),
      createdAt: new Date(),
      updatedAt: new Date(),
    };

    return plainToInstance(InvoiceModel, invoice);
  }

  public async create(args: CreateInvoiceArgs) {
    const invoice = {
      ...args,
      client_id: args.clientId,
    };
    console.log('invoice', invoice);
    const invoiceData = this.invoiceRepository.upsert(invoice);
    const insertRes = await this.invoiceRepository.insert(invoiceData);
    const invoiceReturned = await this.invoiceRepository.findOneBy({
      id: insertRes.raw[0].id,
    });
    return plainToInstance(InvoiceModel, invoiceReturned);
  }
}
